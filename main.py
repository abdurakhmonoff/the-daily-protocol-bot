import telebot
from telebot import types
import schedule
import time
import threading
import datetime
import pytz
import json
import os
from PIL import Image, ImageDraw, ImageFont
import calendar

# Bot token
BOT_TOKEN = "8238191038:AAHQj7ijWD_wOOzdrSURbj1gw7lGmVbN0TM"
bot = telebot.TeleBot(BOT_TOKEN)

# Timezone
TIMEZONE = pytz.timezone('Asia/Tashkent')

# User data storage
USER_DATA_FILE = "user_data.json"
FATHER_USERNAME = "@gayratbek_79"

# Global variables
user_data = {}
chat_id = None  # Will be set automatically when bot receives first message


def load_user_data():
    global user_data
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            user_data = json.load(f)
    else:
        user_data = {
            "morning_tasks": [False, False, False],
            "daily_goals": [],
            "daily_goals_status": [False, False, False],
            "evening_tasks": [False, False, False],
            "current_streak": 0,
            "total_streak": 0,
            "last_completion_date": None,
            "monthly_completions": {}
        }


def save_user_data():
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)


def reset_daily_tasks():
    global user_data
    user_data["morning_tasks"] = [False, False, False]
    user_data["daily_goals"] = []
    user_data["daily_goals_status"] = [False, False, False]
    user_data["evening_tasks"] = [False, False, False]
    save_user_data()


def create_streak_image():
    today = datetime.datetime.now(TIMEZONE)
    month_year = today.strftime("%B %Y")

    # Create image
    width, height = 800, 600
    img = Image.new('RGB', (width, height), color='white')
    draw = ImageDraw.Draw(img)

    try:
        font_title = ImageFont.truetype("arial.ttf", 36)
        font_day = ImageFont.truetype("arial.ttf", 20)
    except:
        try:
            font_title = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 36)
            font_day = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 20)
        except:
            font_title = ImageFont.load_default()
            font_day = ImageFont.load_default()

    # Title
    draw.text((width // 2 - 150, 50), f"–°—Ç—Ä–∏–∫ –∑–∞ {month_year}", font=font_title, fill='black')

    # Calendar grid
    cal = calendar.monthcalendar(today.year, today.month)
    start_x, start_y = 100, 150
    cell_width, cell_height = 80, 60

    # Days of week headers
    days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    for i, day in enumerate(days):
        x = start_x + i * cell_width + cell_width // 2 - 10
        y = start_y - 30
        draw.text((x, y), day, font=font_day, fill='black')

    # Calendar days
    month_key = f"{today.year}-{today.month:02d}"
    completed_days = user_data.get("monthly_completions", {}).get(month_key, [])

    for week_num, week in enumerate(cal):
        for day_num, day in enumerate(week):
            if day == 0:
                continue

            x = start_x + day_num * cell_width
            y = start_y + week_num * cell_height

            # Check if day is completed
            if day in completed_days:
                draw.rectangle([x, y, x + cell_width - 5, y + cell_height - 5], fill='lightgreen', outline='green')
            else:
                draw.rectangle([x, y, x + cell_width - 5, y + cell_height - 5], fill='lightgray', outline='black')

            # Day number
            draw.text((x + cell_width // 2 - 10, y + cell_height // 2 - 10), str(day), font=font_day, fill='black')

    # Streak info
    streak_text = f"–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {user_data['current_streak']} –¥–Ω–µ–π"
    total_text = f"–û–±—â–∏–π —Å—Ç—Ä–∏–∫: {user_data['total_streak']} –¥–Ω–µ–π"
    draw.text((100, height - 100), streak_text, font=font_title, fill='blue')
    draw.text((100, height - 60), total_text, font=font_title, fill='blue')

    img.save('streak_calendar.png')
    return 'streak_calendar.png'


def send_morning_routine():
    if not chat_id:
        return

    reset_daily_tasks()

    text = """üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞–º –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:

‚ùå 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–Ω—é (–¥—É—à, –ø–∏—Ç—å–µ –≤–æ–¥—ã)
‚ùå 2. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π (Cold Turkey)
‚ùå 3. –ü—Ä–æ–±–µ–∂–∫–∞ (30 –º–∏–Ω)"""

    markup = types.InlineKeyboardMarkup(row_width=3)
    btn1 = types.InlineKeyboardButton("1", callback_data="morning_1")
    btn2 = types.InlineKeyboardButton("2", callback_data="morning_2")
    btn3 = types.InlineKeyboardButton("3", callback_data="morning_3")
    markup.add(btn1, btn2, btn3)

    bot.send_message(chat_id, text, reply_markup=markup)


def send_goals_request():
    text = """‚úÖ –£—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ 3 —Ü–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
1. —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Ü–µ–ª—å
2. —ç—Ç–æ –≤—Ç–æ—Ä–∞—è —Ü–µ–ª—å  
3. —ç—Ç–æ —Ç—Ä–µ—Ç—å—è —Ü–µ–ª—å"""

    bot.send_message(chat_id, text)


def send_goals_checklist():
    if not user_data["daily_goals"]:
        return

    text = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for i, goal in enumerate(user_data["daily_goals"]):
        status = "‚úÖ" if user_data["daily_goals_status"][i] else "‚ùå"
        text += f"{status} {i + 1}. {goal}\n"

    markup = types.InlineKeyboardMarkup(row_width=3)
    btn1 = types.InlineKeyboardButton("1", callback_data="goal_1")
    btn2 = types.InlineKeyboardButton("2", callback_data="goal_2")
    btn3 = types.InlineKeyboardButton("3", callback_data="goal_3")
    markup.add(btn1, btn2, btn3)

    bot.send_message(chat_id, text, reply_markup=markup)


def send_evening_checklist():
    text = """üåô –í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–ª–∏—Å—Ç:

‚ùå 1. –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü
‚ùå 2. –ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ 30 –º–∏–Ω—É—Ç
‚ùå 3. –í–µ–¥–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""

    markup = types.InlineKeyboardMarkup(row_width=3)
    btn1 = types.InlineKeyboardButton("1", callback_data="evening_1")
    btn2 = types.InlineKeyboardButton("2", callback_data="evening_2")
    btn3 = types.InlineKeyboardButton("3", callback_data="evening_3")
    markup.add(btn1, btn2, btn3)

    bot.send_message(chat_id, text, reply_markup=markup)


def send_daily_completion():
    # Update streak
    today = datetime.datetime.now(TIMEZONE)
    today_str = today.strftime("%Y-%m-%d")
    month_key = f"{today.year}-{today.month:02d}"

    # Update monthly completions
    if month_key not in user_data["monthly_completions"]:
        user_data["monthly_completions"][month_key] = []

    if today.day not in user_data["monthly_completions"][month_key]:
        user_data["monthly_completions"][month_key].append(today.day)

    # Update streak
    if user_data["last_completion_date"]:
        last_date = datetime.datetime.strptime(user_data["last_completion_date"], "%Y-%m-%d")
        if (today.date() - last_date.date()).days == 1:
            user_data["current_streak"] += 1
        else:
            user_data["current_streak"] = 1
    else:
        user_data["current_streak"] = 1

    user_data["total_streak"] += 1
    user_data["last_completion_date"] = today_str
    save_user_data()

    # Create and send streak image
    image_path = create_streak_image()

    congratulations_text = f"""üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –î–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! {FATHER_USERNAME}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {user_data['current_streak']} –¥–Ω–µ–π
- –û–±—â–∏–π —Å—Ç—Ä–∏–∫: {user_data['total_streak']} –¥–Ω–µ–π"""

    with open(image_path, 'rb') as photo:
        bot.send_photo(chat_id, photo, caption=congratulations_text)


def check_deadline():
    if not chat_id:
        return

    # Check if all main goals are completed
    if not all(user_data["daily_goals_status"]):
        incomplete_goals = []
        for i, completed in enumerate(user_data["daily_goals_status"]):
            if not completed and i < len(user_data["daily_goals"]):
                incomplete_goals.append(f"{i + 1}. {user_data['daily_goals'][i]}")

        warning_text = f"""‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! {FATHER_USERNAME}

–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
{chr(10).join(incomplete_goals)}

–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –æ –ø–µ—Ä–µ–≤–æ–¥–µ $10 –∑–∞ –∫–∞–∂–¥—É—é –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!

–û–±—â–∞—è —Å—É–º–º–∞ –∫ –ø–µ—Ä–µ–≤–æ–¥—É: ${len(incomplete_goals) * 10}"""

        bot.send_message(chat_id, warning_text)


# TEST COMMANDS
@bot.message_handler(commands=['help'])
def help_command(message):
    global chat_id
    if not chat_id:
        chat_id = message.chat.id

    help_text = """ü§ñ Daily Protocol Bot - –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã:</b>
/test_morning - –¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä—É—Ç–∏–Ω—ã
/test_goals - –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–ª–µ–π (–ø–æ—Å–ª–µ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä—É—Ç–∏–Ω—ã)
/test_evening - –¢–µ—Å—Ç –≤–µ—á–µ—Ä–Ω–µ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞
/test_completion - –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è
/test_deadline - –¢–µ—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ

üîß <b>–£—Ç–∏–ª–∏—Ç—ã:</b>
/test_reset - –°–±—Ä–æ—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á –Ω–∞ –¥–µ–Ω—å
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á
/test_streak - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∏–∫–µ
/test_image - –°–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ç—Ä–∏–∫–∞
/test_goals_input - –¢–µ—Å—Ç –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–π

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
/set_chat - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
/debug - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>
- 06:00 - –£—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞
- 23:59 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""

    bot.send_message(message.chat.id, help_text, parse_mode='HTML')


@bot.message_handler(commands=['test_morning'])
def test_morning_command(message):
    global chat_id
    chat_id = message.chat.id
    bot.send_message(message.chat.id, "üß™ –¢–µ—Å—Ç–∏—Ä—É—é —É—Ç—Ä–µ–Ω–Ω—é—é —Ä—É—Ç–∏–Ω—É...")
    send_morning_routine()


@bot.message_handler(commands=['test_goals'])
def test_goals_command(message):
    global chat_id
    chat_id = message.chat.id

    # Set morning tasks as completed for testing
    user_data["morning_tasks"] = [True, True, True]
    save_user_data()

    bot.send_message(message.chat.id, "üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å —Ü–µ–ª–µ–π...")
    send_goals_request()


@bot.message_handler(commands=['test_evening'])
def test_evening_command(message):
    global chat_id
    chat_id = message.chat.id

    # Set prerequisites as completed for testing
    user_data["morning_tasks"] = [True, True, True]
    user_data["daily_goals"] = ["–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å 1", "–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å 2", "–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å 3"]
    user_data["daily_goals_status"] = [True, True, True]
    save_user_data()

    bot.send_message(message.chat.id, "üß™ –¢–µ—Å—Ç–∏—Ä—É—é –≤–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–ª–∏—Å—Ç...")
    send_evening_checklist()


@bot.message_handler(commands=['test_completion'])
def test_completion_command(message):
    global chat_id
    chat_id = message.chat.id

    # Set all tasks as completed for testing
    user_data["morning_tasks"] = [True, True, True]
    user_data["daily_goals"] = ["–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å 1", "–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å 2", "–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å 3"]
    user_data["daily_goals_status"] = [True, True, True]
    user_data["evening_tasks"] = [True, True, True]
    save_user_data()

    bot.send_message(message.chat.id, "üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è...")
    send_daily_completion()


@bot.message_handler(commands=['test_deadline'])
def test_deadline_command(message):
    global chat_id
    chat_id = message.chat.id

    # Set some goals as incomplete for testing
    user_data["daily_goals"] = ["–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ü–µ–ª—å 1", "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ü–µ–ª—å 2", "–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ü–µ–ª—å 3"]
    user_data["daily_goals_status"] = [False, True, False]
    save_user_data()

    bot.send_message(message.chat.id, "üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ...")
    check_deadline()


@bot.message_handler(commands=['test_reset'])
def test_reset_command(message):
    global chat_id
    chat_id = message.chat.id

    bot.send_message(message.chat.id, "üß™ –°–±—Ä–∞—Å—ã–≤–∞—é –≤—Å–µ –∑–∞–¥–∞—á–∏...")
    reset_daily_tasks()
    bot.send_message(message.chat.id, "‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")


@bot.message_handler(commands=['status'])
def status_command(message):
    global chat_id
    if not chat_id:
        chat_id = message.chat.id

    status_text = "üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>\n\n"

    # Morning tasks
    status_text += "üåÖ <b>–£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b>\n"
    morning_tasks_names = [
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–Ω—é",
        "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ—Ü. —Å–µ—Ç–µ–π",
        "–ü—Ä–æ–±–µ–∂–∫–∞"
    ]
    for i, task in enumerate(morning_tasks_names):
        status = "‚úÖ" if user_data["morning_tasks"][i] else "‚ùå"
        status_text += f"{status} {task}\n"

    # Daily goals
    status_text += "\nüéØ <b>–î–Ω–µ–≤–Ω—ã–µ —Ü–µ–ª–∏:</b>\n"
    if user_data["daily_goals"]:
        for i, goal in enumerate(user_data["daily_goals"]):
            status = "‚úÖ" if user_data["daily_goals_status"][i] else "‚ùå"
            status_text += f"{status} {goal}\n"
    else:
        status_text += "‚ùå –¶–µ–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"

    # Evening tasks
    status_text += "\nüåô <b>–í–µ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b>\n"
    evening_tasks_names = [
        "–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
        "–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏",
        "–í–µ–¥–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"
    ]
    for i, task in enumerate(evening_tasks_names):
        status = "‚úÖ" if user_data["evening_tasks"][i] else "‚ùå"
        status_text += f"{status} {task}\n"

    # Streak info
    status_text += f"\nüìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    status_text += f"‚Ä¢ –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {user_data['current_streak']} –¥–Ω–µ–π\n"
    status_text += f"‚Ä¢ –û–±—â–∏–π —Å—Ç—Ä–∏–∫: {user_data['total_streak']} –¥–Ω–µ–π\n"
    status_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {user_data.get('last_completion_date', '–ù–∏–∫–æ–≥–¥–∞')}"

    bot.send_message(message.chat.id, status_text, parse_mode='HTML')


@bot.message_handler(commands=['test_streak'])
def test_streak_command(message):
    global chat_id
    chat_id = message.chat.id

    streak_text = f"üìà <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∏–∫–µ:</b>\n\n"
    streak_text += f"‚Ä¢ –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {user_data['current_streak']} –¥–Ω–µ–π\n"
    streak_text += f"‚Ä¢ –û–±—â–∏–π —Å—Ç—Ä–∏–∫: {user_data['total_streak']} –¥–Ω–µ–π\n"
    streak_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {user_data.get('last_completion_date', '–ù–∏–∫–æ–≥–¥–∞')}\n\n"
    streak_text += f"üìÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º:</b>"

    for month, days in user_data.get('monthly_completions', {}).items():
        streak_text += f"\n‚Ä¢ {month}: {len(days)} –¥–Ω–µ–π"

    bot.send_message(message.chat.id, streak_text, parse_mode='HTML')


@bot.message_handler(commands=['test_image'])
def test_image_command(message):
    global chat_id
    chat_id = message.chat.id

    bot.send_message(message.chat.id, "üß™ –°–æ–∑–¥–∞—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ç—Ä–∏–∫–∞...")

    try:
        image_path = create_streak_image()
        with open(image_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ç—Ä–∏–∫–∞ (—Ç–µ—Å—Ç)")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")


@bot.message_handler(commands=['set_chat'])
def set_chat_command(message):
    global chat_id
    chat_id = message.chat.id
    bot.send_message(message.chat.id, f"‚úÖ –ß–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π (ID: {chat_id})")


@bot.message_handler(commands=['test_goals_input'])
def test_goals_input_command(message):
    global chat_id
    chat_id = message.chat.id

    # Set morning as completed
    user_data["morning_tasks"] = [True, True, True]
    user_data["daily_goals"] = []
    save_user_data()

    test_goals_text = """üß™ –¢–µ—Å—Ç –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

1. –ü–µ—Ä–≤–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å
2. –í—Ç–æ—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å  
3. –¢—Ä–µ—Ç—å—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å"""

    bot.send_message(message.chat.id, test_goals_text)


@bot.message_handler(commands=['debug'])
def debug_command(message):
    global chat_id
    if not chat_id:
        chat_id = message.chat.id

    debug_text = f"üîß <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
    debug_text += f"<b>Chat ID:</b> {message.chat.id}\n"
    debug_text += f"<b>Global chat_id:</b> {chat_id}\n"
    debug_text += f"<b>User ID:</b> {message.from_user.id}\n"
    debug_text += f"<b>Username:</b> @{message.from_user.username if message.from_user.username else 'None'}\n\n"
    debug_text += f"<b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
    debug_text += f"<pre>{json.dumps(user_data, ensure_ascii=False, indent=2)}</pre>"

    bot.send_message(message.chat.id, debug_text, parse_mode='HTML')


# CALLBACK HANDLERS
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    global user_data

    if call.data.startswith("morning_"):
        task_num = int(call.data.split("_")[1]) - 1
        user_data["morning_tasks"][task_num] = True
        save_user_data()

        # Update message
        text = "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞–º –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:\n\n"
        morning_tasks = [
            "1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–Ω—é (–¥—É—à, –ø–∏—Ç—å–µ –≤–æ–¥—ã)",
            "2. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π (Cold Turkey)",
            "3. –ü—Ä–æ–±–µ–∂–∫–∞ (30 –º–∏–Ω)"
        ]

        for i, task in enumerate(morning_tasks):
            status = "‚úÖ" if user_data["morning_tasks"][i] else "‚ùå"
            text += f"{status} {task}\n"

        markup = types.InlineKeyboardMarkup(row_width=3)
        btn1 = types.InlineKeyboardButton("1", callback_data="morning_1")
        btn2 = types.InlineKeyboardButton("2", callback_data="morning_2")
        btn3 = types.InlineKeyboardButton("3", callback_data="morning_3")
        markup.add(btn1, btn2, btn3)

        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

        # Check if all morning tasks completed
        if all(user_data["morning_tasks"]):
            send_goals_request()

    elif call.data.startswith("goal_"):
        task_num = int(call.data.split("_")[1]) - 1
        user_data["daily_goals_status"][task_num] = True
        save_user_data()

        # Send congratulations
        bot.send_message(call.message.chat.id, f"üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¶–µ–ª—å {task_num + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! {FATHER_USERNAME}")

        # Update goals message
        text = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        for i, goal in enumerate(user_data["daily_goals"]):
            status = "‚úÖ" if user_data["daily_goals_status"][i] else "‚ùå"
            text += f"{status} {i + 1}. {goal}\n"

        markup = types.InlineKeyboardMarkup(row_width=3)
        btn1 = types.InlineKeyboardButton("1", callback_data="goal_1")
        btn2 = types.InlineKeyboardButton("2", callback_data="goal_2")
        btn3 = types.InlineKeyboardButton("3", callback_data="goal_3")
        markup.add(btn1, btn2, btn3)

        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

        # Check if all goals completed
        if all(user_data["daily_goals_status"]):
            send_evening_checklist()

    elif call.data.startswith("evening_"):
        task_num = int(call.data.split("_")[1]) - 1
        user_data["evening_tasks"][task_num] = True
        save_user_data()

        # Update message
        text = "üåô –í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–ª–∏—Å—Ç:\n\n"
        evening_tasks = [
            "1. –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü",
            "2. –ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ 30 –º–∏–Ω—É—Ç",
            "3. –í–µ–¥–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"
        ]

        for i, task in enumerate(evening_tasks):
            status = "‚úÖ" if user_data["evening_tasks"][i] else "‚ùå"
            text += f"{status} {task}\n"

        markup = types.InlineKeyboardMarkup(row_width=3)
        btn1 = types.InlineKeyboardButton("1", callback_data="evening_1")
        btn2 = types.InlineKeyboardButton("2", callback_data="evening_2")
        btn3 = types.InlineKeyboardButton("3", callback_data="evening_3")
        markup.add(btn1, btn2, btn3)

        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

        # Check if all evening tasks completed
        if all(user_data["evening_tasks"]):
            send_daily_completion()


# MESSAGE HANDLERS
@bot.message_handler(func=lambda message: True)
def handle_goals_input(message):
    global user_data, chat_id

    if not chat_id:
        chat_id = message.chat.id

    # Skip if this is a command
    if message.text.startswith('/'):
        return

    # Check if this is goals input
    if (all(user_data["morning_tasks"]) and
            not user_data["daily_goals"] and
            message.text.count('\n') >= 2):

        lines = message.text.strip().split('\n')
        goals = []
        for line in lines:
            if line.strip().startswith(('1.', '2.', '3.')):
                goal = line.strip()[2:].strip()
                goals.append(goal)

        if len(goals) == 3:
            user_data["daily_goals"] = goals
            user_data["daily_goals_status"] = [False, False, False]
            save_user_data()
            send_goals_checklist()
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 3 —Ü–µ–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")


# SCHEDULING FUNCTIONS
def schedule_jobs():
    # Schedule morning routine at 6:00 AM Tashkent time
    schedule.every().day.at("06:00").do(send_morning_routine)

    # Schedule deadline check at 11:59 PM Tashkent time
    schedule.every().day.at("23:59").do(check_deadline)


def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)


# MAIN EXECUTION
if __name__ == "__main__":
    print("ü§ñ Daily Protocol Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # Load user data
    load_user_data()
    print("üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    # Schedule jobs
    schedule_jobs()
    print("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (06:00 - —É—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞, 23:59 - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞)")

    # Start scheduler in a separate thread
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    print("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    print("‚úÖ Daily Protocol Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –≤ —á–∞—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

    # Start bot polling
    bot.polling(none_stop=True)